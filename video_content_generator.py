import os
import json
from datetime import datetime
from script_generator import ScriptGenerator

class VideoContentGenerator:
    def __init__(self):
        self.script_generator = ScriptGenerator()
    
    def generate_video_script(self, user_prompt):
        """G√©n√®re un script de formation optimis√© pour la cr√©ation vid√©o"""
        print("üé¨ G√©n√©ration d'un script optimis√© pour vid√©o...")
        
        # G√©n√©rer le script de base
        script_data = self.script_generator.generate_training_script(user_prompt)
        
        # Optimiser pour la cr√©ation vid√©o
        video_script = self._optimize_for_video(script_data)
        
        return video_script
    
    def _optimize_for_video(self, script_data):
        """Optimise le script pour la cr√©ation vid√©o"""
        video_script = {
            "titre": script_data.get('titre_formation', ''),
            "description": script_data.get('description', ''),
            "duree_estimee": script_data.get('duree_estimee', ''),
            "niveau": script_data.get('niveau', ''),
            "scenes": []
        }
        
        for scene in script_data.get('scenes', []):
            optimized_scene = {
                "numero": scene['numero'],
                "titre": scene['titre'],
                "voix_off": scene['voix_off'],
                "duree_estimee": f"{len(scene['voix_off'].split())} mots (~{len(scene['voix_off'].split()) // 2} secondes)",
                "elements_visuels": scene['elements_visuels'],
                "points_cles": scene.get('points_cles', []),
                "suggestions_creation": self._generate_creation_tips(scene)
            }
            video_script["scenes"].append(optimized_scene)
        
        return video_script
    
    def _generate_creation_tips(self, scene):
        """G√©n√®re des conseils pour la cr√©ation vid√©o de la sc√®ne"""
        tips = []
        
        # Analyse du contenu pour suggestions
        voix_off = scene['voix_off'].lower()
        
        if any(word in voix_off for word in ['donn√©es', 'graphique', 'statistique', 'r√©sultat']):
            tips.append("üíπ Utilisez des graphiques anim√©s ou des infographies")
        
        if any(word in voix_off for word in ['√©tapes', 'processus', 'm√©thode', 'proc√©dure']):
            tips.append("üîÑ Animation step-by-step recommand√©e")
        
        if any(word in voix_off for word in ['exemple', 'cas', 'illustration']):
            tips.append("üìñ Ajoutez des exemples visuels concrets")
        
        if any(word in voix_off for word in ['attention', 'important', 'crucial', 'essentiel']):
            tips.append("‚ö†Ô∏è Mettez en √©vidence visuellement (couleurs, animations)")
        
        if len(tips) == 0:
            tips.append("üé• Utilisez des visuels simples et √©pur√©s")
        
        return tips
    
    def export_for_video_creation(self, video_script, format_type="all"):
        """Exporte le script dans diff√©rents formats pour la cr√©ation vid√©o"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        exports = {}
        
        if format_type in ["all", "json"]:
            # Export JSON d√©taill√©
            json_path = f"video_script_{timestamp}.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(video_script, f, ensure_ascii=False, indent=2)
            exports["json"] = json_path
            print(f"üìÑ Script JSON export√©: {json_path}")
        
        if format_type in ["all", "txt"]:
            # Export texte simple pour teleprompter
            txt_path = f"teleprompter_{timestamp}.txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(f"FORMATION: {video_script['titre']}\n")
                f.write("=" * 50 + "\n\n")
                
                for scene in video_script['scenes']:
                    f.write(f"SC√àNE {scene['numero']}: {scene['titre']}\n")
                    f.write("-" * 30 + "\n")
                    f.write(f"{scene['voix_off']}\n\n")
                    f.write("PAUSE\n\n")
            
            exports["txt"] = txt_path
            print(f"üìù Script t√©l√©prompter export√©: {txt_path}")
        
        if format_type in ["all", "storyboard"]:
            # Export storyboard d√©taill√©
            storyboard_path = f"storyboard_{timestamp}.md"
            with open(storyboard_path, 'w', encoding='utf-8') as f:
                f.write(f"# üé¨ STORYBOARD: {video_script['titre']}\n\n")
                f.write(f"**Description:** {video_script['description']}\n\n")
                f.write(f"**Dur√©e estim√©e:** {video_script['duree_estimee']}\n\n")
                f.write(f"**Niveau:** {video_script['niveau']}\n\n")
                
                for scene in video_script['scenes']:
                    f.write(f"## Sc√®ne {scene['numero']}: {scene['titre']}\n\n")
                    f.write(f"**Dur√©e:** {scene['duree_estimee']}\n\n")
                    f.write(f"### üé§ Voix Off\n")
                    f.write(f"{scene['voix_off']}\n\n")
                    f.write(f"### üñºÔ∏è √âl√©ments Visuels\n")
                    f.write(f"{scene['elements_visuels']}\n\n")
                    f.write(f"### üí° Conseils de Cr√©ation\n")
                    for tip in scene['suggestions_creation']:
                        f.write(f"- {tip}\n")
                    f.write("\n")
                    f.write(f"### üîë Points Cl√©s\n")
                    for point in scene['points_cles']:
                        f.write(f"- {point}\n")
                    f.write("\n---\n\n")
            
            exports["storyboard"] = storyboard_path
            print(f"üìã Storyboard export√©: {storyboard_path}")
        
        return exports
    
    def display_video_summary(self, video_script):
        """Affiche un r√©sum√© du script vid√©o"""
        print("\n" + "üé¨" * 20)
        print(f"üì∫ SCRIPT VID√âO: {video_script['titre']}")
        print("üé¨" * 20)
        print(f"üìù Description: {video_script['description']}")
        print(f"‚è±Ô∏è Dur√©e estim√©e: {video_script['duree_estimee']}")
        print(f"üìä Niveau: {video_script['niveau']}")
        
        total_words = 0
        print(f"\nüé¨ SC√àNES ({len(video_script['scenes'])}):")
        for scene in video_script['scenes']:
            words = len(scene['voix_off'].split())
            total_words += words
            print(f"\n{scene['numero']}. {scene['titre']}")
            print(f"   üìù Voix off: {words} mots (~{words // 2}s)")
            print(f"   üñºÔ∏è Visuels: {scene['elements_visuels'][:80]}...")
            print(f"   üí° Conseils: {len(scene['suggestions_creation'])} suggestions")
        
        print(f"\nüìä STATISTIQUES TOTALES:")
        print(f"   ‚Ä¢ Total mots: {total_words}")
        print(f"   ‚Ä¢ Dur√©e estim√©e: ~{total_words // 2} secondes ({total_words // 120} minutes)")
        print(f"   ‚Ä¢ Nombre de sc√®nes: {len(video_script['scenes'])}")

def main():
    generator = VideoContentGenerator()
    
    print("üé¨ G√âN√âRATEUR DE CONTENU VID√âO")
    print("=" * 50)
    print("Ce g√©n√©rateur cr√©e des scripts optimis√©s pour la cr√©ation vid√©o")
    print("Compatible avec: Synthesia, Loom, OBS Studio, DaVinci Resolve, etc.")
    
    while True:
        try:
            user_input = input("\nüí¨ Entrez votre demande de formation (ou 'quit'): ").strip()
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("üëã Au revoir!")
                break
            
            if not user_input:
                print("‚ùå Veuillez entrer une demande valide")
                continue
            
            # G√©n√©rer le script vid√©o
            video_script = generator.generate_video_script(user_input)
            generator.display_video_summary(video_script)
            
            # Options d'export
            export_choice = input("\nüíæ Format d'export ? (JSON=j, TXT=t, Storyboard=s, Tous=a, Non=n): ").strip().lower()
            
            if export_choice in ['j', 'json']:
                generator.export_for_video_creation(video_script, "json")
            elif export_choice in ['t', 'txt']:
                generator.export_for_video_creation(video_script, "txt")
            elif export_choice in ['s', 'storyboard']:
                generator.export_for_video_creation(video_script, "storyboard")
            elif export_choice in ['a', 'tous', 'all']:
                exports = generator.export_for_video_creation(video_script, "all")
                print(f"\n‚úÖ Tous les formats export√©s:")
                for format_type, path in exports.items():
                    print(f"   ‚Ä¢ {format_type.upper()}: {path}")
            
            print("\nüí° PROCHAINES √âTAPES:")
            print("   1. Utilisez le fichier t√©l√©prompter pour l'enregistrement vocal")
            print("   2. Suivez le storyboard pour cr√©er les visuels")
            print("   3. Importez dans votre outil de montage vid√©o pr√©f√©r√©")
            print("   4. Ou uploadez le PowerPoint sur Synthesia manuellement")
            
        except KeyboardInterrupt:
            print("\nüëã Interruption. √Ä bient√¥t!")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            print("üîÑ Veuillez r√©essayer")

if __name__ == "__main__":
    main()
