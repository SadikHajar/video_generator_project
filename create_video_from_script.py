import os
import json
import time
import requests
from dotenv import load_dotenv

# ‚úÖ AJOUT : Import pour les sous-titres
try:
    from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip
    MOVIEPY_AVAILABLE = True
except ImportError:
    MOVIEPY_AVAILABLE = False
    print("‚ö†Ô∏è MoviePy non install√©. Vid√©o sans sous-titres.")

load_dotenv()
API_URL = "https://api.synthesia.io/v2/videos"
API_KEY = os.getenv("SYNTHESIA_API_KEY")

# ‚úÖ NOUVELLE FONCTION : T√©l√©charger la vid√©o
def download_video(url, filename="video_synthesia.mp4"):
    """T√©l√©charge la vid√©o depuis Synthesia"""
    try:
        print("üì• T√©l√©chargement de la vid√©o...")
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        with open(filename, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"‚úÖ Vid√©o t√©l√©charg√©e : {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå Erreur t√©l√©chargement : {e}")
        return None

# ‚úÖ REMPLACEZ votre fonction add_subtitles_to_video par celle-ci :

def add_subtitles_to_video(video_path, script_data, output_path="video_avec_sous_titres.mp4"):
    """Ajoute les sous-titres en bas de la vid√©o - Version sans ImageMagick"""
    
    if not MOVIEPY_AVAILABLE:
        print("‚ùå MoviePy non disponible. Retour de la vid√©o originale.")
        return video_path
    
    try:
        print("üìù Ajout des sous-titres (sans ImageMagick)...")
        
        # Charger la vid√©o
        video = VideoFileClip(video_path)
        duration_total = video.duration
        
        # Calculer la dur√©e par sc√®ne
        scenes = script_data.get('scenes', [])
        scenes_avec_voix = [s for s in scenes if s.get('voix_off', '').strip()]
        
        if not scenes_avec_voix:
            print("‚ö†Ô∏è Aucune sc√®ne avec voix_off trouv√©e")
            video.close()
            return video_path
            
        duration_per_scene = duration_total / len(scenes_avec_voix)
        
        # Cr√©er les clips de sous-titres
        subtitle_clips = []
        
        for i, scene in enumerate(scenes_avec_voix):
            start_time = i * duration_per_scene
            voix_off_text = scene.get('voix_off', '').strip()
            
            if voix_off_text:
                print(f"üìù Sc√®ne {i+1}: {voix_off_text[:50]}...")
                
                try:
                    # ‚úÖ M√âTHODE SIMPLE : TextClip minimal sans font ni stroke
                    subtitle = TextClip(
                        txt=voix_off_text,
                        fontsize=28,
                        color='white'
                    ).set_position(('center', video.h - 60))\
                     .set_start(start_time)\
                     .set_duration(duration_per_scene)
                    
                    subtitle_clips.append(subtitle)
                    print(f"‚úÖ Sous-titre ajout√© pour sc√®ne {i+1}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur sous-titre sc√®ne {i+1}: {e}")
                    # Essayer version encore plus basique
                    try:
                        subtitle = TextClip(voix_off_text)\
                                 .set_position(('center', 'bottom'))\
                                 .set_start(start_time)\
                                 .set_duration(duration_per_scene)
                        
                        subtitle_clips.append(subtitle)
                        print(f"‚úÖ Sous-titre basique ajout√© pour sc√®ne {i+1}")
                    except Exception as e2:
                        print(f"‚ùå Impossible d'ajouter sous-titre pour sc√®ne {i+1}: {e2}")
                        continue
        
        if subtitle_clips:
            print(f"üé¨ Composition de {len(subtitle_clips)} sous-titres...")
            
            # Combiner vid√©o + sous-titres
            final_clips = [video] + subtitle_clips
            final_video = CompositeVideoClip(final_clips)
            
            # Sauvegarder avec moins de verbose pour √©viter les erreurs
            print("üíæ Sauvegarde de la vid√©o finale...")
            final_video.write_videofile(
                output_path, 
                codec='libx264', 
                audio_codec='aac', 
                verbose=False, 
                logger=None,
                temp_audiofile='temp-audio.m4a',
                remove_temp=True
            )
            
            # Nettoyer
            video.close()
            final_video.close()
            for clip in subtitle_clips:
                clip.close()
            
            print(f"‚úÖ Vid√©o avec sous-titres cr√©√©e : {output_path}")
            return output_path
        else:
            print("‚ö†Ô∏è Aucun sous-titre cr√©√©, retour vid√©o originale")
            video.close()
            return video_path
            
    except Exception as e:
        print(f"‚ùå Erreur ajout sous-titres : {e}")
        import traceback
        traceback.print_exc()
        return video_path

def create_video_from_script(json_file_path):
    if not API_KEY:
        raise ValueError("‚ùå SYNTHESIA_API_KEY manquante dans .env")

    if not API_KEY.strip():
        raise ValueError("‚ùå SYNTHESIA_API_KEY est vide dans .env")

    with open(json_file_path, 'r', encoding='utf-8') as f:
        script_data = json.load(f)

    clips = []
    for scene in script_data.get('scenes', []):
        voix_off_content = scene.get('voix_off')
        if voix_off_content and voix_off_content.strip():
            clip = {
                "scriptText": voix_off_content.strip(),
                "avatar": "anna_costume1_cameraA",
                "background": "off_white",
                "avatarSettings": {
                    "horizontalAlign": "center",
                    "style": "rectangular", 
                    "scale": 1.0
                }
            }
            clips.append(clip)
        else:
            print(f"‚ö†Ô∏è Sc√®ne {scene.get('numero', 'N/A')} ignor√©e car la voix_off est vide.")

    if not clips:
        print("‚ùå Aucune sc√®ne valide avec voix_off trouv√©e.")
        return None

    payload = {
        "test": True,
        "title": script_data.get("titre_formation", "Formation IA"),
        "description": script_data.get("description", ""),
        "visibility": "private",
        "input": clips
    }

    headers = {
        "Content-Type": "application/json",
         "Authorization": f"{API_KEY}" 
    }

    print("üì° Envoi de la requ√™te √† Synthesia...")
    print(f"üîç Nombre de clips: {len(clips)}")
    
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        
        if response.status_code in [200, 201]:
            video_data = response.json()
            video_id = video_data.get("id")
            print(f"‚úÖ Vid√©o cr√©√©e avec succ√®s ! ID: {video_id}")
            
            # Attendre que la vid√©o soit pr√™te
            download_url = wait_for_video_completion(video_id)
            
            if download_url:
                print(f"üé¨ Vid√©o Synthesia pr√™te !")
                
                # ‚úÖ NOUVEAU : T√©l√©charger la vid√©o
                video_file = download_video(download_url, "video_synthesia.mp4")
                
                if video_file:
                    # ‚úÖ NOUVEAU : Ajouter les sous-titres
                    final_video = add_subtitles_to_video(video_file, script_data, "video_finale_avec_sous_titres.mp4")
                    
                    print(f"üöÄ VID√âO FINALE PR√äTE : {final_video}")
                    print(f"üìù Votre vid√©o avec sous-titres est disponible !")
                    return final_video
                else:
                    print(f"‚ö†Ô∏è √âchec t√©l√©chargement, lien direct : {download_url}")
                    return download_url
            else:
                print(f"‚è≥ Vid√©o en cours de g√©n√©ration. Consultez : https://app.synthesia.io/video/{video_id}")
                return f"https://app.synthesia.io/video/{video_id}"
            
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            print(f"üìÑ R√©ponse compl√®te: {response.text}")
            return None
            
    except Exception as err:
        print(f"üí• Erreur lors de la cr√©ation: {err}")
        return None

def wait_for_video_completion(video_id):
    """Attend que la vid√©o soit pr√™te et r√©cup√®re le lien de t√©l√©chargement"""
    headers = {
        "Authorization": f"{API_KEY}",
        "Content-Type": "application/json"
    }
    
    status_url = f"https://api.synthesia.io/v2/videos/{video_id}"
    max_attempts = 30
    
    print("‚è≥ V√©rification du statut de la vid√©o...")
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(status_url, headers=headers)
            
            if response.status_code == 200:
                video_info = response.json()
                status = video_info.get('status')
                
                print(f"üìä Statut: {status}")
                
                if status == "complete":
                    download_url = video_info.get('download')
                    if download_url:
                        return download_url
                    else:
                        print("‚ö†Ô∏è Vid√©o compl√®te mais pas de lien de t√©l√©chargement")
                        return None
                        
                elif status == "failed":
                    print("‚ùå La g√©n√©ration de la vid√©o a √©chou√©")
                    return None
                    
                elif status in ["in_progress", "queued"]:
                    print(f"‚è≥ G√©n√©ration en cours... (tentative {attempt + 1}/{max_attempts})")
                    time.sleep(10)
                    continue
                    
            else:
                print(f"‚ùå Erreur lors de la v√©rification: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"üí• Erreur lors de la v√©rification: {e}")
            return None
    
    print("‚è∞ Timeout: La vid√©o prend plus de temps que pr√©vu √† √™tre g√©n√©r√©e")
    return None